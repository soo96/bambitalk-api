// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  userId    BigInt   @id @default(autoincrement()) @map("user_id")
  nickname  String?
  role      Role?
  coupleId  BigInt?  @map("couple_id")
  spouseId  BigInt?  @map("spouse_id")
  kakaoId   BigInt?  @unique @map("kakao_id")
  isDeleted Boolean? @default(false) @map("is_deleted")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  tokens        Token[]
  notifications Notification[]
  message       Message[]
  couple        Couple?        @relation(fields: [coupleId], references: [coupleId])
  schedule      Schedule[]

  @@map("user")
}

model Couple {
  coupleId  BigInt   @id @default(autoincrement()) @map("couple_id")
  user1Id   BigInt   @map("user1_id")
  user2Id   BigInt?  @map("user2_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  users User[]
  child Child[]
  chat  Chat[]
  task  Schedule[]

  @@map("couple")
}

model Token {
  tokenId      BigInt   @id @default(autoincrement()) @map("token_id")
  userId       BigInt   @unique @map("user_id")
  refreshToken String?  @map("refresh_token") @db.Text
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [userId])

  @@map("token")
}

model Child {
  childId  BigInt @id @default(autoincrement()) @map("child_id")
  coupleId BigInt @map("couple_id")

  status ChildStatus @default(FETAL)

  fetalName String?   @map("fetal_name")
  dueDate   DateTime? @map("due_date")

  name      String?
  gender    Gender?
  birthDate DateTime? @map("birth_date")

  isDeleted Boolean  @default(false) @map("is_deleted")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  couple Couple @relation(fields: [coupleId], references: [coupleId])

  @@map("child")
}

model Chat {
  chatId        BigInt    @id @default(autoincrement()) @map("chat_id")
  coupleId      BigInt    @unique @map("couple_id")
  lastMessageId BigInt?   @map("last_message_id")
  lastMessageAt DateTime? @map("last_message_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  couple  Couple    @relation(fields: [coupleId], references: [coupleId])
  message Message[]
}

model Message {
  messageId BigInt   @id @default(autoincrement()) @map("message_id")
  chatId    BigInt   @map("chat_id")
  senderId  BigInt   @map("sender_id")
  content   String
  isRead      Boolean  @default(false)
  sentAt    DateTime @default(now()) @map("sent_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  chat   Chat @relation(fields: [chatId], references: [chatId])
  sender User @relation(fields: [senderId], references: [userId])
}

model Schedule {
  scheduleId  BigInt   @id @default(autoincrement()) @map("schedule_id")
  coupleId    BigInt   @map("couple_id")
  creatorId   BigInt   @map("creator_id")
  title       String
  description String?  @db.Text
  date        DateTime
  color       Color    @default(YELLOW)
  isCompleted Boolean  @default(false) @map("is_completed")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  couple  Couple @relation(fields: [coupleId], references: [coupleId])
  creator User   @relation(fields: [creatorId], references: [userId])

  @@index([coupleId])
  @@index([date])
  @@map("schedule")
}

model Notification {
  notificationId BigInt   @id @default(autoincrement()) @map("notification_id")
  userId         BigInt   @map("user_id")
  content        String
  createdAt      DateTime @default(now()) @map("created_at")
  user           User     @relation(fields: [userId], references: [userId])

  @@map("notification")
}

enum Role {
  DAD
  MOM
}

enum ChildStatus {
  FETAL
  BORN
}

enum Gender {
  MALE
  FEMALE
}

enum Color {
  RED
  ORANGE
  YELLOW
  GREEN
  BLUE
  PURPLE
}
